#include <OneWire.h>
#include <DallasTemperature.h>
#include "DFRobot_PH.h"
#include <Wire.h>
#include <RTClib.h>  // Include the RTC library

RTC_DS3231 rtc;  // Create an RTC object

const int analogPin = A0; // Analog pin connected to the TDS sensor
const int temperaturePin = 2; // Pin connected to the DS18B20 temperature sensor
#define PH_PIN A1

// // Calibration values
// float calibrationADCValue[] = {0,2,16,143,241,366,401,420,433,470};
// float calibrationTDS[] = {0,10,50,300,391,558,663,737,802,1000 };

float calibrationADCValue[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                         22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
                         42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
                         62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                         82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
                         102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
                         119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
                         136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
                         153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
                         170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
                         187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
                         204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
                         221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
                         238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
                         255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
                         272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
                         289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
                         306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322,
                         323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
                         340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
                         357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
                         374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
                         391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407,
                         408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
                         425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
                         442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
                         459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472};
float calibrationTDS[] = {0.0, 2.9411764705882355, 5.882352941176471, 8.823529411764707, 11.764705882352942, 14.705882352941178, 17.647058823529413, 20.58823529411765, 
                    23.529411764705884, 26.47058823529412, 29.411764705882355, 32.352941176470594, 35.294117647058826, 38.23529411764706, 41.1764705882353, 44.117647058823536, 
                     47.05882352941177, 50.0, 52.11864406779661, 54.23728813559322, 56.35593220338983, 58.47457627118644, 60.59322033898305, 62.71186440677966, 64.83050847457628, 
                     66.94915254237289, 69.0677966101695, 71.1864406779661, 73.30508474576271, 75.42372881355932, 77.54237288135593, 79.66101694915254, 81.77966101694915, 
                     83.89830508474577, 86.01694915254237, 88.13559322033899, 90.2542372881356, 92.37288135593221, 94.49152542372882, 96.61016949152543, 98.72881355932203, 
                     100.84745762711864, 102.96610169491527, 105.08474576271186, 107.20338983050848, 109.32203389830508, 111.4406779661017, 113.55932203389831, 115.67796610169492, 
                     117.79661016949153, 119.91525423728814, 122.03389830508475, 124.15254237288136, 126.27118644067797, 128.38983050847457, 130.5084745762712, 132.62711864406782, 
                     134.74576271186442, 136.864406779661, 138.98305084745763, 141.10169491525426, 143.22033898305085, 145.33898305084745, 147.45762711864407, 149.5762711864407, 
                     151.6949152542373, 153.8135593220339, 155.93220338983053, 158.05084745762713, 160.16949152542372, 162.28813559322035, 164.40677966101697, 166.52542372881356, 
                     168.64406779661016, 170.76271186440678, 172.8813559322034, 175.0, 177.11864406779662, 179.23728813559322, 181.35593220338984, 183.47457627118644, 
                     185.59322033898306, 187.71186440677968, 189.83050847457628, 191.9491525423729, 194.0677966101695, 196.18644067796612, 198.3050847457627, 200.42372881355934, 
                     202.54237288135593, 204.66101694915255, 206.77966101694915, 208.89830508474577, 211.0169491525424, 213.135593220339, 215.2542372881356, 217.3728813559322, 
                     219.49152542372883, 221.61016949152543, 223.72881355932205, 225.84745762711864, 227.96610169491527, 230.08474576271186, 232.20338983050848, 234.3220338983051, 
                     236.4406779661017, 238.55932203389833, 240.67796610169492, 242.79661016949154, 244.91525423728814, 247.03389830508476, 249.15254237288136, 251.27118644067798, 
                     253.38983050847457, 255.5084745762712, 257.6271186440678, 259.7457627118644, 261.86440677966107, 263.98305084745766, 266.10169491525426, 268.22033898305085, 
                     270.33898305084745, 272.45762711864404, 274.5762711864407, 276.69491525423734, 278.81355932203394, 280.93220338983053, 283.0508474576271, 285.1694915254237, 
                     287.2881355932203, 289.40677966101697, 291.52542372881356, 293.6440677966102, 295.7627118644068, 297.8813559322034, 300.0, 302.07715133531156, 
                     304.15430267062317, 306.2314540059347, 308.3086053412463, 310.3857566765579, 312.46290801186944, 314.540059347181, 316.61721068249255, 318.69436201780417, 
                     320.7715133531157, 322.8486646884273, 324.9258160237389, 327.00296735905044, 329.080118694362, 331.1572700296736, 333.23442136498517, 335.3115727002967, 
                     337.38872403560833, 339.4658753709199, 341.54302670623144, 343.620178041543, 345.6973293768546, 347.77448071216617, 349.8516320474778, 351.92878338278933, 
                     354.0059347181009, 356.08308605341244, 358.16023738872406, 360.2373887240356, 362.31454005934717, 364.3916913946588, 366.46884272997033, 368.5459940652819, 
                     370.62314540059344, 372.70029673590506, 374.7774480712166, 376.8545994065282, 378.9317507418398, 381.00890207715133, 383.0860534124629, 385.1632047477745, 
                     387.24035608308606, 389.31750741839767, 391.3946587537092, 393.4718100890208, 395.54896142433233, 397.62611275964395, 399.7032640949555, 401.78041543026706, 
                     403.85756676557867, 405.9347181008902, 408.0118694362018, 410.08902077151333, 412.16617210682494, 414.2433234421365, 416.3204747774481, 418.39762611275967, 
                     420.4747774480712, 422.5519287833828, 424.6290801186944, 426.70623145400594, 428.78338278931756, 430.8605341246291, 432.93768545994067, 435.0148367952522, 
                     437.0919881305638, 439.1691394658754, 441.24629080118694, 443.32344213649856, 445.4005934718101, 447.47774480712167, 449.5548961424332, 451.63204747774483, 
                     453.7091988130564, 455.786350148368, 457.86350148367956, 459.9406528189911, 462.01780415430267, 464.0949554896142, 466.17210682492583, 468.24925816023745, 
                     470.326409495549, 472.40356083086056, 474.4807121661721, 476.55786350148367, 478.6350148367953, 480.71216617210683, 482.78931750741845, 484.86646884273, 
                     486.94362017804156, 489.0207715133531, 491.0979228486647, 493.1750741839763, 495.2522255192879, 497.32937685459945, 499.406528189911, 501.48367952522256, 
                     503.5608308605341, 505.6379821958457, 507.7151335311573, 509.7922848664689, 511.86943620178045, 513.946587537092, 516.0237388724036, 518.1008902077151, 
                     520.1780415430267, 522.2551928783383, 524.3323442136499, 526.4094955489614, 528.486646884273, 530.5637982195846, 532.6409495548962, 534.7181008902078, 
                     536.7952522255193, 538.8724035608309, 540.9495548961424, 543.026706231454, 545.1038575667656, 547.1810089020771, 549.2581602373888, 551.3353115727003, 
                     553.4124629080119, 555.4896142433234, 557.566765578635, 559.6439169139467, 561.7210682492582, 563.7982195845698, 565.8753709198813, 567.9525222551929, 
                     570.0296735905044, 572.106824925816, 574.1839762611276, 576.2611275964392, 578.3382789317508, 580.4154302670623, 582.4925816023739, 584.5697329376856, 
                     586.6468842729971, 588.7240356083087, 590.8011869436202, 592.8783382789318, 594.9554896142433, 597.0326409495549, 599.1097922848664, 601.186943620178, 
                     603.2640949554897, 605.3412462908012, 607.4183976261128, 609.4955489614244, 611.572700296736, 613.6498516320476, 615.7270029673591, 617.8041543026707, 
                     619.8813056379822, 621.9584569732938, 624.0356083086053, 626.1127596439169, 628.1899109792284, 630.2670623145401, 632.3442136498517, 634.4213649851632, 
                     636.4985163204749, 638.5756676557864, 640.652818991098, 642.7299703264096, 644.8071216617211, 646.8842729970327, 648.9614243323442, 651.0385756676558, 
                     653.1157270029673, 655.1928783382789, 657.2700296735906, 659.3471810089021, 661.4243323442137, 663.5014836795253, 665.5786350148369, 667.6557863501484, 
                     669.73293768546, 671.8100890207716, 673.8872403560831, 675.9643916913947, 678.0415430267062, 680.1186943620178, 682.1958456973294, 684.272997032641, 
                     686.3501483679526, 688.4272997032641, 690.5044510385757, 692.5816023738873, 694.6587537091989, 696.7359050445104, 698.813056379822, 700.8902077151336, 
                     702.9673590504451, 705.0445103857567, 707.1216617210682, 709.1988130563798, 711.2759643916914, 713.353115727003, 715.4302670623146, 717.5074183976262, 
                     719.5845697329378, 721.6617210682493, 723.7388724035609, 725.8160237388724, 727.893175074184, 729.9703264094956, 732.0474777448071, 734.1246290801187, 
                     736.2017804154303, 738.2789317507419, 740.3560830860534, 742.433234421365, 744.5103857566767, 746.5875370919882, 748.6646884272998, 750.7418397626113, 
                     752.8189910979229, 754.8961424332344, 756.973293768546, 759.0504451038576, 761.1275964391691, 763.2047477744808, 765.2818991097923, 767.3590504451039, 
                     769.4362017804156, 771.5133531157271, 773.5905044510387, 775.6676557863502, 777.7448071216618, 779.8219584569733, 781.8991097922849, 783.9762611275964, 
                     786.053412462908, 788.1305637982196, 790.2077151335312, 792.2848664688428, 794.3620178041543, 796.439169139466, 798.5163204747776, 800.5934718100891, 
                     802.6706231454007, 804.7477744807122, 806.8249258160238, 808.9020771513353, 810.9792284866469, 813.0563798219586, 815.1335311572701, 817.2106824925817, 
                     819.2878338278932, 821.3649851632048, 823.4421364985163, 825.519287833828, 827.5964391691396, 829.6735905044511, 831.7507418397627, 833.8278931750742, 
                     835.9050445103858, 837.9821958456973, 840.059347181009, 842.1364985163206, 844.2136498516321, 846.2908011869437, 848.3679525222552, 850.4451038575668, 
                     852.5222551928784, 854.59940652819, 856.6765578635016, 858.7537091988131, 860.8308605341247, 862.9080118694362, 864.9851632047478, 867.0623145400594, 
                     869.139465875371, 871.2166172106826, 873.2937685459941, 875.3709198813057, 877.4480712166172, 879.5252225519289, 881.6023738872404, 883.679525222552, 
                     885.7566765578636, 887.8338278931751, 889.9109792284867, 891.9881305637983, 894.0652818991099, 896.1424332344214, 898.219584569733, 900.2967359050446, 
                     902.3738872403561, 904.4510385756677, 906.5281899109793, 908.6053412462909, 910.6824925816024, 912.759643916914, 914.8367952522256, 916.9139465875371, 
                     918.9910979228488, 921.0682492581603, 923.1454005934719, 925.2225519287834, 927.299703264095, 929.3768545994066, 931.4540059347182, 933.5311572700298, 
                     935.6083086053413, 937.6854599406529, 939.7626112759644, 941.839762611276, 943.9169139465876, 945.9940652818992, 948.0712166172108, 950.1483679525223, 
                     952.2255192878339, 954.3026706231454, 956.379821958457, 958.4569732937687, 960.5341246290802, 962.6112759643918, 964.6884272997033, 966.7655786350149, 
                     968.8427299703264, 970.919881305638, 973.9970326409497, 976.0741839762612, 978.1513353115728, 980.2284866468843, 982.3056379821959, 984.3827893175074, 
                     986.4599406528191, 988.5370919881307, 990.6142433234422, 992.6913946587538, 994.7685459940653, 996.8456973293769, 998.9228486646884, 1000.0 };




#define SCOUNT 30      // sum of sample point
int analogBuffer[SCOUNT];
int analogBufferIndex = 0;
float tdsValues[SCOUNT];
float temperature = 25;

OneWire oneWire(temperaturePin);
DallasTemperature sensors(&oneWire);
DFRobot_PH ph;

void setup() {
  Serial.begin(9600); // Initialize serial communication
  pinMode(temperaturePin, INPUT);
  ph.begin();

  // Check if RTC is connected
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
  }
  else {
    Serial.println("RTC found!");
    // Check if RTC lost power and if so, set the time
    if (rtc.lostPower()) {
      Serial.println("RTC lost power, let's set the time!");
      rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }
  }
}

void loop() {
  DateTime now = rtc.now();  // Get the current time from the RTC

  // Print timestamp and update message if RTC is detected
  if (rtc.begin()) {
    Serial.print(now.timestamp(DateTime::TIMESTAMP_FULL));
    Serial.println(" RTC data updated");
  } else {
    Serial.println("RTC not detected");
  }

  int adcValue = analogRead(analogPin); // Read ADC value from the TDS sensor

  // Map the ADC value to TDS concentration using linear interpolation
  float tdsValue = interpolate(adcValue, calibrationADCValue, calibrationTDS, sizeof(calibrationADCValue) / sizeof(calibrationADCValue[0]));

  // Read temperature from DS18B20 sensor
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);

  // Apply temperature compensation
  float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);
  float compensationVoltage = tdsValue / compensationCoefficient;

  // Store TDS values in the array for mean and median calculations
  tdsValues[analogBufferIndex] = compensationVoltage;

  // pH Measurement
  float voltage = analogRead(PH_PIN) / 1024.0 * 5000; // read the voltage
  float phValue = ph.readPH(voltage, temperature);    // convert voltage to pH with temperature compensation

  //every 40 milliseconds, read the analog value from the ADC
  static unsigned long analogSampleTimepoint = millis();
  if (millis() - analogSampleTimepoint > 40U) {
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = adcValue;    // read the analog value and store into the buffer
    analogBufferIndex++;
    if (analogBufferIndex == SCOUNT)
      analogBufferIndex = 0;
  }

  // Calculate mean and median of TDS values
  float meanValue = getMean(tdsValues, SCOUNT);
  float medianValue = getMedian(tdsValues, SCOUNT);

  // Print the TDS values, mean, median, pH value, and temperature to the serial monitor
  Serial.print("||ADC Value: ");
  Serial.print(adcValue);
  Serial.print("|| Compensated TDS Value: ");
  Serial.print(compensationVoltage, 2);
  Serial.print(" V|| Mean TDS Value: ");
  Serial.print(meanValue, 2);
  Serial.print("|| Median TDS Value: ");
  Serial.print(medianValue, 2);
  Serial.print("|| pH Value: ");
  Serial.print(phValue, 2);
  Serial.print("|| Temperature: ");
  Serial.println(temperature);

  delay(2000); // Delay for 1 second

  ph.calibration(voltage, temperature); // calibration process by Serial CMD
}

float readTemperature() {
  // add your code here to get the temperature from your temperature sensor
}

// Custom linear interpolation function
float interpolate(float x, float x_values[], float y_values[], int size) {
  for (int i = 1; i < size; ++i) {
    if (x < x_values[i]) {
      // Linear interpolation formula: y = y1 + (x - x1) * ((y2 - y1) / (x2 - x1))
      return y_values[i - 1] + (x - x_values[i - 1]) * ((y_values[i] - y_values[i - 1]) / (x_values[i] - x_values[i - 1]));
    }
  }
  return y_values[size - 1]; // Return the last value if x is greater than the highest x_value
}

float getMean(float values[], int size) {
  float sum = 0;
  for (int i = 0; i < size; ++i) {
    sum += values[i];
  }
  return sum / size;
}

float getMedian(float values[], int size) {
  float sortedValues[size];
  for (int i = 0; i < size; ++i) {
    sortedValues[i] = values[i];
  }

  // Sort the array
  for (int i = 0; i < size - 1; ++i) {
    for (int j = 0; j < size - i - 1; ++j) {
      if (sortedValues[j] > sortedValues[j + 1]) {
        float temp = sortedValues[j];
        sortedValues[j] = sortedValues[j + 1];
        sortedValues[j + 1] = temp;
      }
    }
  }

  // Calculate median
  if (size % 2 == 0) {
    return (sortedValues[size / 2 - 1] + sortedValues[size / 2]) / 2.0;
  } else {
    return sortedValues[size / 2];
  }
}
