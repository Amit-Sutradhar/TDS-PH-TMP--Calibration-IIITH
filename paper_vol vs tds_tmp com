

#include <OneWire.h>
#include <DallasTemperature.h>

// Pin where the TDS sensor output is connected
const int sensorPin = A0;

// Pin where the DS18B20 temperature sensor is connected
const int temperaturePin = 2;

// Calibration data
const float calibrationVoltages[] = {0, 0.02, 0.11, 0.25, 0.57, 0.82, 1.08, 1.35, 1.54, 1.77, 1.99, 2.18, 2.32};
const int calibrationTDS[] = {0, 20, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
const int numCalibrationPoints = sizeof(calibrationVoltages) / sizeof(calibrationVoltages[0]);

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(temperaturePin);

// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);

const int SCOUNT = 30; // sum of sample point
float analogBuffer[SCOUNT];
int analogBufferIndex = 0;
float temperature = 25;

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Start up the DS18B20 temperature sensor
  sensors.begin();
}

void loop() {
  // Read the voltage from the TDS sensor
  int sensorValue = analogRead(sensorPin);
  
  // Convert the sensor value to voltage (assuming 5V reference voltage)
  float voltage = sensorValue * (5.0 / 1023.0);

  // Print the voltage to the serial monitor
  Serial.print("Voltage: ");
  Serial.print(voltage, 2); // Print voltage with 2 decimal places
  Serial.println(" V");

  // Read temperature from DS18B20 sensor
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);

  // Print the temperature to the serial monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" Â°C");

  // Calculate the compensation coefficient
  float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);

  // Calculate the compensated voltage
  float compensatedVoltage = voltage / compensationCoefficient;

  // Print the compensated voltage to the serial monitor
  Serial.print("Compensated Voltage: ");
  Serial.print(compensatedVoltage, 2);
  Serial.println(" V");

  // Calculate the TDS value using linear interpolation or extrapolation
  int tdsValue = interpolateTDS(compensatedVoltage);

  // Print the TDS value to the serial monitor
  Serial.print("TDS Value: ");
  Serial.println(tdsValue);

  // Delay before the next reading
  delay(1000); // Adjust as needed
}

// Function to perform linear interpolation or extrapolation and calculate the TDS value
int interpolateTDS(float voltage) {
  // Find the two calibration points surrounding the current voltage
  int idx = 0;
  while (idx < numCalibrationPoints && calibrationVoltages[idx] < voltage) {
    idx++;
  }
  
  // If the voltage is beyond the calibration range, extrapolate the TDS value
  if (idx == 0) {
    return calibrationTDS[0];
  } else if (idx == numCalibrationPoints) {
    // Calculate the slope of the calibration curve
    float slope = (float)(calibrationTDS[numCalibrationPoints - 1] - calibrationTDS[numCalibrationPoints - 2]) /
                  (calibrationVoltages[numCalibrationPoints - 1] - calibrationVoltages[numCalibrationPoints - 2]);
    // Extrapolate the TDS value using the slope
    return calibrationTDS[numCalibrationPoints - 1] + (int)(slope * (voltage - calibrationVoltages[numCalibrationPoints - 1]));
  }
  
  // Perform linear interpolation to calculate the TDS value
  float tdsValue = calibrationTDS[idx - 1] + 
                   (calibrationTDS[idx] - calibrationTDS[idx - 1]) * 
                   ((voltage - calibrationVoltages[idx - 1]) / (calibrationVoltages[idx] - calibrationVoltages[idx - 1]));
  
  return int(tdsValue); // Convert to integer and return
}
on this code i have use temperature compensation with voltage vc tds ,,,,,,,,,,











----------------------------------------------------------------------------------




2nd code ---------------------



// Pin where the TDS sensor output is connected
const int sensorPin = A0;

// Calibration data
const float calibrationVoltages[] = {0, 0.02, 0.11, 0.25, 0.57, 0.82, 1.08, 1.35, 1.54, 1.77, 1.99, 2.18, 2.32};
const int calibrationTDS[] = {0, 20, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
const int numCalibrationPoints = sizeof(calibrationVoltages) / sizeof(calibrationVoltages[0]);

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
}

void loop() {
  // Read the voltage from the TDS sensor
  int sensorValue = analogRead(sensorPin);
  
  // Convert the sensor value to voltage (assuming 5V reference voltage)
  float voltage = sensorValue * (5.0 / 1023.0);

  // Print the voltage to the serial monitor
  Serial.print("Voltage: ");
  Serial.print(voltage, 2); // Print voltage with 2 decimal places
  Serial.println(" V");

  // Calculate the TDS value using linear interpolation or extrapolation
  int tdsValue = interpolateTDS(voltage);

  // Print the TDS value to the serial monitor
  Serial.print("TDS Value: ");
  Serial.println(tdsValue);

  // Delay before the next reading
  delay(1000); // Adjust as needed
}

// Function to perform linear interpolation or extrapolation and calculate the TDS value
int interpolateTDS(float voltage) {
  // Find the two calibration points surrounding the current voltage
  int idx = 0;
  while (idx < numCalibrationPoints && calibrationVoltages[idx] < voltage) {
    idx++;
  }
  
  // If the voltage is beyond the calibration range, extrapolate the TDS value
  if (idx == 0) {
    return calibrationTDS[0];
  } else if (idx == numCalibrationPoints) {
    // Calculate the slope of the calibration curve
    float slope = (float)(calibrationTDS[numCalibrationPoints - 1] - calibrationTDS[numCalibrationPoints - 2]) /
                  (calibrationVoltages[numCalibrationPoints - 1] - calibrationVoltages[numCalibrationPoints - 2]);
    // Extrapolate the TDS value using the slope
    return calibrationTDS[numCalibrationPoints - 1] + (int)(slope * (voltage - calibrationVoltages[numCalibrationPoints - 1]));
  }
  
  // Perform linear interpolation to calculate the TDS value
  float tdsValue = calibrationTDS[idx - 1] + 
                   (calibrationTDS[idx] - calibrationTDS[idx - 1]) * 
                   ((voltage - calibrationVoltages[idx - 1]) / (calibrationVoltages[idx] - calibrationVoltages[idx - 1]));
  
  return int(tdsValue); // Convert to integer and return
}








.........................this is without temperature compensation ,,,,,,,,,,,,,if without temperature compensation tds is increases ,, rong valuee 
