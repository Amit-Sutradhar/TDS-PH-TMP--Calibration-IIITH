#include <Wire.h>
#include <Adafruit_ADS1X15.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Create an ADS1X15 instance
Adafruit_ADS1115 ads;

const int analogPin = A0; // Analog pin connected to the TDS sensor
const int temperaturePin = 33; // Pin connected to the DS18B20 temperature sensor

// Calibration values
float calibrationADCValue[] = {20, 631, 1510, 4988, 13952, 20296};
float calibrationTDS[] = {0, 50, 63, 300, 661, 1000};

#define SCOUNT 30      // sum of sample point
int analogBuffer[SCOUNT];
int analogBufferIndex = 0;
float tdsValues[SCOUNT];
float temperature = 25;

OneWire oneWire(temperaturePin);
DallasTemperature sensors(&oneWire);

void setup() {
  Serial.begin(9600); // Initialize serial communication

  // Initialize the ADS1115
  if (!ads.begin()) {
    Serial.println("Failed to initialize ADS1115!");
    while (1);
  }

  // Set the gain (PGA) to adjust the measurement range
  ads.setGain(GAIN_TWOTHIRDS);  // Adjust the gain as needed

  pinMode(temperaturePin, INPUT);
}

void loop() {
  // Get the ADC value for the TDS sensor connected to A0
  int16_t adcValue = ads.readADC_SingleEnded(0);

  // Map the ADC value to TDS concentration using linear interpolation
  float tdsValue = interpolate(adcValue, calibrationADCValue, calibrationTDS, sizeof(calibrationADCValue) / sizeof(calibrationADCValue[0]));

  // Read temperature from DS18B20 sensor
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);

  // Apply temperature compensation
  float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);
  float compensationVoltage = tdsValue / compensationCoefficient;

  // Ensure the compensated TDS value is not below 0
  if (compensationVoltage < 0.0) {
    compensationVoltage = 0.0;
  }

  // Store TDS values in the array for mean and median calculations
  tdsValues[analogBufferIndex] = compensationVoltage;

  // every 40 milliseconds, read the analog value from the ADC
  static unsigned long analogSampleTimepoint = millis();
  if (millis() - analogSampleTimepoint > 40U) {
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = adcValue;    // read the analog value and store into the buffer
    analogBufferIndex++;
    if (analogBufferIndex == SCOUNT)
      analogBufferIndex = 0;
  }

  // Calculate mean and median of TDS values
  float meanValue = getMean(tdsValues, SCOUNT);
  float medianValue = getMedian(tdsValues, SCOUNT);

  // Print the TDS values, mean, median, and temperature to the serial monitor
  Serial.print("ADC Value: ");
  Serial.print(adcValue);

  // Check if ADC value is below 40, set compensated TDS, mean, and median to 0
  if (adcValue < 40) {
    compensationVoltage = 0.0;
    meanValue = 0.0;
    medianValue = 0.0;
  }

  Serial.print(", Compensated TDS Value: ");
  Serial.print(compensationVoltage, 2);
  Serial.print(" V, Mean Value: ");
  Serial.print(meanValue, 2);
  Serial.print(", Median Value: ");
  Serial.print(medianValue, 2);
  Serial.print(", Temperature: ");
  Serial.print(temperature);
  Serial.println(" Â°C");

  delay(1000); // Delay for better readability in the serial monitor
}


// Custom linear interpolation function
float interpolate(float x, float x_values[], float y_values[], int size) {
  for (int i = 1; i < size; ++i) {
    if (x < x_values[i]) {
      // Linear interpolation formula: y = y1 + (x - x1) * ((y2 - y1) / (x2 - x1))
      return y_values[i - 1] + (x - x_values[i - 1]) * ((y_values[i] - y_values[i - 1]) / (x_values[i] - x_values[i - 1]));
    }
  }
  return y_values[size - 1]; // Return the last value if x is greater than the highest x_value
}

float getMean(float values[], int size) {
  float sum = 0;
  for (int i = 0; i < size; ++i) {
    sum += values[i];
  }
  return sum / size;
}

float getMedian(float values[], int size) {
  float sortedValues[size];
  for (int i = 0; i < size; ++i) {
    sortedValues[i] = values[i];
  }

  // Sort the array
  for (int i = 0; i < size - 1; ++i) {
    for (int j = 0; j < size - i - 1; ++j) {
      if (sortedValues[j] > sortedValues[j + 1]) {
        float temp = sortedValues[j];
        sortedValues[j] = sortedValues[j + 1];
        sortedValues[j + 1] = temp;
      }
    }
  }

  // Calculate median
  if (size % 2 == 0) {
    return (sortedValues[size / 2 - 1] + sortedValues[size / 2]) / 2.0;
  } else {
    return sortedValues[size / 2];
  }
}
